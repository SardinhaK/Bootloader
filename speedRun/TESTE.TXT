///////////    FUNÇÃO DE TEMPO ALEATÓRIO PARA EAX    ////////////

MAX_TIME equ 5000 ; Define a constante MAX_TIME com o valor 5000 (em milissegundos)

; FUNÇÃO DE TEMPO ALEATÓRIO
gera_tempo:
  ;SALVA OS VALORES DOS REGISTRADORES
  push ebp
  mov ebp, esp    ; Define o ponteiro da base da pilha atual para o valor atual do ponteiro de pilha
  push ebx
  push ecx
  push edx

  ; Inicializa a semente do gerador de números aleatórios
  mov eax, [0x046C]       ; Carrega o contador de tempo do sistema (endereço de memória)
  xor eax, [0x046C+4]     ; XOR com a parte alta do contador
  xor eax, [0x046C+8]     ; XOR com a parte baixa do contador
  mov ebx, eax            ; Salva a semente do gerador de números aleatórios no registrador ebx

  ; Gera um número aleatório
  mov ecx, ebx            ; Usa ebx como operando para a operação de multiplicação
  mov edx, 0x015A4E35     ; Carrega a constante mágica para o registrador edx
  mul edx                 ; Multiplica eax por edx e salva o resultado em eax
  add eax, 1              ; Soma 1 ao valor de eax
  mov ebx, eax            ; Atualiza a semente do gerador de números aleatórios com o novo valor de eax

  ; Calcula o valor do tempo aleatório
  xor edx, edx            ; Limpa o registrador de alta ordem
  mov ecx, MAX_TIME       ; Carrega a constante MAX_TIME (5000) para o registrador ecx
  div ecx                 ; Divide eax por ecx e salva o resultado em eax e o resto em edx

  ; Converte o tempo para milissegundos
  imul eax, 1000          ; Multiplica eax por 1000 para converter o tempo em segundos para ms

  ; Restaura os valores inniciais desempilhando os registradores salvos
  pop edx 
  pop ecx
  pop ebx
  mov esp, ebp            ; Restaura o ponteiro da pilha atual para o valor armazenado em ebp
  pop ebp                 ; Desempilha o valor de ebp para retornar para o endereço de retorno da subrotina
  ret                     ; Retorna o valor do tempo em ms no registrador EAX





///////////////    FUNÇÃO DE PULAR ESPAÇO COM UM VALOR EM ECX     ////////////

ex:
mov bh, NumEnte
call Espacamento



Espacamento:
    push cx    ; Salva o valor de cx na pilha
    xor cx, cx  ; cx se torna 0

    loop_Espaco:
        call endl       ; Pula uma linha
        dec bh         ; Decrementa bh em um
        cmp bh, cx    ; Compara bh com zero
        je exit_loop    ; Se zerar vai pro final
        jmp loop_Espaco ; Caso contrário loop novamente

    exit_loop:
        pop cx     ; Restaura o valor de cx
        ret         ; Retorna pro ponto de chamada